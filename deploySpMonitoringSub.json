{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "1366798070451782631"
    }
  },
  "parameters": {
    "soonExpireThresholdInDays": {
      "type": "int",
      "defaultValue": 90
    },
    "longExpireThresholdInDays": {
      "type": "int",
      "defaultValue": 365
    }
  },
  "functions": [],
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "rg-spmonitoring",
      "location": "westeurope",
      "tags": {
        "owner": "kwiec@softserveinc.com"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "name": "spMonitoringDeploy",
      "resourceGroup": "rg-spmonitoring",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1008.15138",
              "templateHash": "6344360401123456940"
            }
          },
          "parameters": {
            "nameSuffix": {
              "type": "string",
              "defaultValue": "spmonitoring",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace"
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "serviceTier": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "Free",
                "Standalone",
                "PerNode",
                "PerGB2018"
              ],
              "metadata": {
                "description": "Required. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode"
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 730,
              "minValue": 0,
              "metadata": {
                "description": "Required. Number of days data will be retained for"
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "useResourcePermissions": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
              }
            },
            "diagnosticLogsRetentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "maxValue": 365,
              "minValue": 0,
              "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
              }
            },
            "diagnosticStorageAccountId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic storage account."
              }
            },
            "workspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of a log analytics workspace."
              }
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
              }
            },
            "eventHubName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
              }
            },
            "lock": {
              "type": "string",
              "defaultValue": "NotSpecified",
              "metadata": {
                "description": "Optional. Specify the type of lock."
              },
              "allowedValues": [
                "CanNotDelete",
                "NotSpecified",
                "ReadOnly"
              ]
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "logsToEnable": {
              "type": "array",
              "defaultValue": [
                "Audit"
              ],
              "allowedValues": [
                "Audit"
              ],
              "metadata": {
                "description": "Optional. The name of logs that will be streamed."
              }
            },
            "metricsToEnable": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "allowedValues": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "Optional. The name of metrics that will be streamed."
              }
            }
          },
          "functions": [],
          "variables": {
            "copy": [
              {
                "name": "diagnosticsLogs",
                "count": "[length(parameters('logsToEnable'))]",
                "input": {
                  "category": "[parameters('logsToEnable')[copyIndex('diagnosticsLogs')]]",
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              },
              {
                "name": "diagnosticsMetrics",
                "count": "[length(parameters('metricsToEnable'))]",
                "input": {
                  "category": "[parameters('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                  "timeGrain": null,
                  "enabled": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                  }
                }
              }
            ],
            "logAnalyticsWorkspaceName": "[format('log-{0}', parameters('nameSuffix'))]",
            "storageAccountName": "[format('st{0}', parameters('nameSuffix'))]",
            "appServicePlanName": "[format('asp-{0}', parameters('nameSuffix'))]",
            "functionName": "[format('func-{0}', parameters('nameSuffix'))]",
            "logAnalyticsSearchVersion": 1
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2020-08-01",
              "name": "[variables('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": "[variables('logAnalyticsSearchVersion')]",
                  "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                },
                "sku": {
                  "name": "[parameters('serviceTier')]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
              }
            },
            {
              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('workspaceId')))), not(empty(parameters('eventHubAuthorizationRuleId')))), not(empty(parameters('eventHubName'))))]",
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('logAnalyticsWorkspaceName'))]",
              "name": "[format('{0}-diagnosticSettings', variables('logAnalyticsWorkspaceName'))]",
              "properties": {
                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                "workspaceId": "[if(not(empty(parameters('workspaceId'))), parameters('workspaceId'), null())]",
                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('eventHubAuthorizationRuleId'))), parameters('eventHubAuthorizationRuleId'), null())]",
                "eventHubName": "[if(not(empty(parameters('eventHubName'))), parameters('eventHubName'), null())]",
                "metrics": "[variables('diagnosticsMetrics')]",
                "logs": "[variables('diagnosticsLogs')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2016-09-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', variables('logAnalyticsWorkspaceName'))]",
              "name": "[format('{0}-{1}-lock', variables('logAnalyticsWorkspaceName'), parameters('lock'))]",
              "properties": {
                "level": "[parameters('lock')]",
                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-04-01",
              "name": "[variables('storageAccountName')]",
              "location": "[resourceGroup().location]",
              "kind": "StorageV2",
              "sku": {
                "name": "Standard_LRS"
              },
              "properties": {
                "encryption": {
                  "keySource": "Microsoft.Storage",
                  "services": {
                    "blob": {
                      "enabled": true
                    },
                    "file": {
                      "enabled": true
                    },
                    "queue": {
                      "enabled": true
                    },
                    "table": {
                      "enabled": true
                    }
                  },
                  "requireInfrastructureEncryption": true
                },
                "allowBlobPublicAccess": false
              }
            },
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2021-01-15",
              "name": "[variables('appServicePlanName')]",
              "location": "[resourceGroup().location]",
              "sku": {
                "tier": "Dynamic",
                "name": "Y1"
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2021-01-15",
              "name": "[variables('functionName')]",
              "kind": "Functionapp",
              "location": "[resourceGroup().location]",
              "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "powershell"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-04-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-04-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[format('{0}files', toLower(variables('functionName')))]"
                    }
                  ],
                  "use32BitWorkerProcess": false,
                  "ftpsState": "Disabled"
                }
              },
              "identity": {
                "type": "SystemAssigned"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Web/sites/functions",
              "apiVersion": "2021-01-15",
              "name": "[format('{0}/SetSpMonitoring', variables('functionName'))]",
              "properties": {
                "config": {
                  "bindings": [
                    {
                      "name": "Timer",
                      "type": "timerTrigger",
                      "direction": "in",
                      "schedule": "0 12 * * * *"
                    }
                  ]
                },
                "files": {
                  "run.ps1": "using namespace System.Net\n\n# Input bindings are passed in via param block.\nparam($Timer)\n\n$ReferenceDateTime = Get-Date -Hour 0 -Minute 0 -Second 0\n$LongExpireThresholdInDays = 365\n$SoonExpireThresholdInDays = 90\n$AlertSeverity = \"3\"\n$ResourceGroupName = 'rg-spmonitoring'\n$DefaultEmailAddressesJson = \"['kamil@cloudforge.pl']\"\n$LogAnalyticsWorkspaceName = \"log-spmonitoring\"\n\n$Global:LogType = \"AppRegistration\"\n\n$defaultEmailRecivers = $DefaultEmailAddressesJson | ConvertFrom-Json\n\n$spMonitoringModulePath = \"$( $PSScriptRoot )/SpMonitoring.psm1\"\nImport-Module -Name $spMonitoringModulePath\n\nreturn;\n\n#region FUNCTIONS\nfunction Get-AzToken {\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory = $true)]\n        [String]\n        $ResourceUri\n    ) \n    $context = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile.DefaultContext\n    $token = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $ResourceUri).AccessToken\n\n    return $Token\n}\n\n#endregion\n\n#CONSTS\n\n$Consts = @{\n    ResourceGraphUri = 'https://graph.microsoft.com/'\n    LocalRuntimeExportPath = @{\n        AzureFunctionRuntime = 'D:\\Home\\export'\n        Local = \"$( $PSScriptRoot )/export\"\n        Force = '~/Documents/coe-sp-monitoring/sp-monitoring-lab-environment/export' #not used\n    }\n}\n\n#endregion\n\n#region exportAzureAdAppRegistration\n\n$token = Get-AzToken -ResourceUri $Consts.ResourceGraphUri\nConnect-MgGraph -AccessToken $token | Out-Null\n\n$context = Get-AzContext\n\n$exportPath = $Consts.LocalRuntimeExportPath.AzureFunctionRuntime\n\nif($context.Account.Type -eq 'User') {\n  $exportPath = $Consts.LocalRuntimeExportPath.Force\n\n  if(-not $exportPath) {\n    $exportPath = $Consts.LocalRuntimeExportPath.Local\n  }\n} \n\nWrite-Host \"Azure AD Export Path = '$( $exportPath )'\"\n\nRemove-Item -Path $exportPath -Recurse -Force -ErrorAction SilentlyContinue #cleanup if needed\n\nExport-AzureAD -Path $exportPath -Type \"Applications\"\n\n#endregion \n\n#region Send logs to Log Analytics\n\n$appRegistrationConfiguration = Get-AppRegistrationConfiguration -AzureAdExportPath $exportPath\n$appRegistrationConfigurationRaw = Get-AppRegistrationConfigurationRaw -AzureAdExportPath $exportPath\n\n#region OLD FUNCTIONS JUST FOR EXPORTS\n\nfunction Get-AppRegistrationConfigurationOld {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath\n    )\n\n    $appsPath = Join-Path -Path $AzureAdExportPath -ChildPath Applications\n    $appItems = Get-ChildItem -Path $appsPath\n    $appObjects = @()\n\n    foreach ($appItem in $appItems) {\n        $appJsonPath = Join-Path -Path $appItem.FullName -ChildPath \"$($appItem.Name).json\"\n\n        $appJson = (Get-Content -Path $appJsonPath) -join ''\n        $app = $appJson | ConvertFrom-Json -Depth 100\n\n        # Write-Host -Object \"Processing app '$( $app.displayName )' [objectId: '$( $app.id )'] in file $( $appJsonPath )\"\n        \n        $appOwnersPath = Join-Path -Path $appItem.FullName -ChildPath 'Owners'\n        $appHasOwners = Test-Path -Path $appOwnersPath\n\n        if ($appHasOwners) {\n            $ownerItems = Get-ChildItem -Path $appOwnersPath\n\n            $appOwners = @()\n\n            foreach ($ownerItem in $ownerItems) {\n                $ownerJsonPath = Join-Path -Path $ownerItem.FullName -ChildPath \"$($ownerItem.Name).json\"\n                $ownerJson = (Get-Content -Path $ownerJsonPath) -join ''\n                $owner = $ownerJson | ConvertFrom-Json -Depth 100\n                $appOwners += $owner\n                # Write-Host -Object \"Found owner '$( $owner.displayName )' [objectId: '$( $owner.id )'] in file $( $ownerJsonPath )\"\n            }\n\n            $app | Add-Member -Name Owners -MemberType NoteProperty -Value $appOwners\n        }\n        $appObjects += $app\n    }\n\n    return $appObjects\n}\n\n$appRegistrationConfigurationsLawExport = Get-AppRegistrationConfigurationOld -AzureAdExportPath $exportPath | ForEach-Object -Process {\n    [PSCustomObject]@{\n        DisplayName                     = $_.displayName\n        ObjectId                        = $_.id\n        CreatedDateTime                 = $_.createdDateTime\n        HasOwner                        = $_.owners.Count -ne 0\n        Owners                          = $_.owners\n        OwnersUpns                      = $_.owners.userPrincipalName -join ','\n        KeyCredentials                  = $_.keyCredentials\n        KeyCredentialsCount             = $_.keyCredentials.Count\n        HasExpiredKeyCredentials        = $_.keyCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }\n        ExpiredKeyCredentialsCount      = ($_.keyCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }).Count\n        ValidKeyCredentialsCount        = ($_.keyCredentials | Where-Object -FilterScript { $_.endDateTime -gt $ReferenceDateTime }).Count\n        PasswordCredentials             = $_.passwordCredentials\n        PasswordCredentialsCount        = $_.passwordCredentials.Count\n        HasExpiredPasswordCredentials   = $_.passwordCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }\n        ExpiredPasswordCredentialsCount = ($_.passwordCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }).Count\n        ValidPasswordCredentialsCount   = ($_.passwordCredentials | Where-Object -FilterScript { $_.endDateTime -gt $ReferenceDateTime }).Count\n    }\n}\n\n#endregion\n\n$logAnalyticsWorkspace = Get-AzOperationalInsightsWorkspace -ResourceGroupName $ResourceGroupName -Name $LogAnalyticsWorkspaceName \n$customerId = $logAnalyticsWorkspace.CustomerId.Guid\n\nforeach ($item in $appRegistrationConfigurationsLawExport ) {\n    $Body = $item | ConvertTo-Json -Depth 100\n\n    $SharedKey = (Get-AzOperationalInsightsWorkspaceSharedKey -ResourceGroupName $logAnalyticsWorkspace.ResourceGroupName -Name $logAnalyticsWorkspace.Name).PrimarySharedKey\n\n    $StringToSign = \"POST\" + \"`n\" + $Body.Length + \"`n\" + \"application/json\" + \"`n\" + $(\"x-ms-date:\" + [DateTime]::UtcNow.ToString(\"r\")) + \"`n\" + \"/api/logs\"\n    $BytesToHash = [Text.Encoding]::UTF8.GetBytes($StringToSign)\n    $KeyBytes = [Convert]::FromBase64String($SharedKey)\n    $HMACSHA256 = New-Object System.Security.Cryptography.HMACSHA256\n    $HMACSHA256.Key = $KeyBytes\n    $CalculatedHash = $HMACSHA256.ComputeHash($BytesToHash)\n    $EncodedHash = [Convert]::ToBase64String($CalculatedHash)\n    $Authorization = 'SharedKey {0}:{1}' -f $CustomerId, $EncodedHash\n\n    $Uri = \"https://\" + $CustomerId + \".ods.opinsights.azure.com\" + \"/api/logs\" + \"?api-version=2016-04-01\"\n    $Headers = @{\n        \"Authorization\"        = $Authorization;\n        \"Log-Type\"             = $logType;\n        \"x-ms-date\"            = [DateTime]::UtcNow.ToString(\"r\");\n        \"time-generated-field\" = $(Get-Date)\n    }\n\n    $Response = Invoke-WebRequest -Uri $Uri -Method Post -ContentType \"application/json\" -Headers $Headers -Body $Body -UseBasicParsing\n    $Response \n\n\n    if ($Response.StatusCode -eq 200) {\n        Write-Information -MessageData \"Logs are Successfully Stored in Log Analytics Workspace\" -InformationAction Continue\n    }\n}\n\n$currentAlerts = @()\n$currentAlerts += (Get-AzScheduledQueryRule -ResourceGroupName $ResourceGroupName).Name\n$alertsToRemove = Get-AlertsToRemove -AzureAdExportPath $exportPath -CurrentAlertNames $currentAlerts -ReferenceDateTime $ReferenceDateTime -SoonExpireThresholdInDays $SoonExpireThresholdInDays -LongExpireThresholdInDays $LongExpireThresholdInDays\nGet-AzScheduledQueryRule -ResourceGroupName $ResourceGroupName | Where-Object -Property Name -In $alertsToRemove | Remove-AzScheduledQueryRule | Out-Null\n\n$currentActionGroups = @() \n$currentActionGroups += (Get-AzActionGroup -ResourceGroupName $ResourceGroupName).Name\nGet-ActionGroupsToRemove -AzureAdExportPath $exportPath -CurrentActionGroupsNames $currentActionGroups \nGet-AzActionGroup -ResourceGroupName $ResourceGroupName | Where-Object -Property Name -In $alertsToRemove | Remove-AzActionGroup | Out-Null\n\nforeach ($item in $appRegistrationConfiguration) {\n    $actionGroupName = Get-ActionGroupName -AppRegistrationConfigurationObject $item\n\n    #region EMailrecivers\n\n    [array]$emailReceivers = @()\n\n    foreach ($mail in $defaultEmailRecivers ) { \n        $emailReceiver = @{\n            name                 = ($mail -split '@')[0]\n            emailAddress         = $mail\n            useCommonAlertSchema = $true\n        }\n\n        $emailReceivers += $emailReceiver\n    }\n\n    foreach ($owner in $item.Owners) { \n        $mail = (Get-AzADUser -ObjectId $owner.id).Mail\n\n        $emailReceiver = @{\n            name                 = $owner.displayName\n            emailAddress         = $mail\n            useCommonAlertSchema = $true\n        }\n\n        $emailReceivers += $emailReceiver\n    }\n\n    Write-Host \"email recivers\"\n    Write-Host ($emailReceivers | ConvertTo-Json )\n    \n    #endregion\n\n    #region Deploy Action Groups\n\n    $templateParameterObject = @{\n        actionGroupName = $actionGroupName\n        groupShortName  = $actionGroupName\n        emailReceivers  = $emailReceivers\n        tags            = @{\n            isServicePrincipalMonitoring = '1'\n        }\n    }\n\n    # $templateFile = Join-Path -Path $PSScriptRoot -ChildPath 'actionGroup.json'\n    $templateFile = Join-Path -Path . -ChildPath 'actionGroup.json'\n\n    $deploymentParameters = @{\n        Name                    = (\"deployment-$(((Get-Date).ToUniversalTime()).ToString('MMdd-HHmm-ss'))-$( (New-Guid).Guid.Substring(0,3) )\" )\n        ResourceGroupName       = $resourceGroupName\n        TemplateFile            = $templateFile\n        TemplateParameterObject = $templateParameterObject\n        Mode                    = 'Incremental'\n    }\n\n    New-AzResourceGroupDeployment @deploymentParameters\n\n    #endregion\n}\n\n$appRegistrationCredentialsSoonExpire = Get-AppRegistrationCredentialsSoonExpire -AzureAdExportPath $exportPath -ReferenceDateTime $ReferenceDateTime -ThresholdInDays $SoonExpireThresholdInDays\n$appRegistrationCredentialsLongExpire = Get-AppRegistrationCredentialsLongExpire -AzureAdExportPath $exportPath -ReferenceDateTime $ReferenceDateTime -ThresholdInDays $LongExpireThresholdInDays\n\nforeach ($item in $appRegistrationConfiguration) {\n    $alerts = @()\n\n    $longExpireAlertName = Get-LongExpireAlertName -AppRegistrationConfigurationObject $item\n\n    $longExpirationQuery = @\"\nAppRegistration_CL\n| where TimeGenerated > startofday(ago(1m))\n| extend KeyAndPasswordSecrets = array_concat(parse_json(PasswordCredentials_s), parse_json(KeyCredentials_s))\n| where array_length(KeyAndPasswordSecrets) > 0 \n| mv-expand Secret = KeyAndPasswordSecrets\n| extend ExpirationDate = make_datetime(Secret.endDateTime)\n| order by make_datetime(ExpirationDate)\n| summarize arg_max(ExpirationDate, *) by ObjectId_g\n| where ExpirationDate > now(LONG_EXPIRATION_DATE_THRESHOLDd)\n| project ObjectId_g, DisplayName_s, MaxExpirationDate = ExpirationDate, Secret\n| where ObjectId_g == 'REPLACE_OBJECT_ID'\n\"@ -replace 'REPLACE_OBJECT_ID', $item.Id -replace 'LONG_EXPIRATION_DATE_THRESHOLD', $LongExpireThresholdInDays \n\n    $longExpirationAlertObject = @{\n        Alert       = @{\n            Name               = $longExpireAlertName \n            ThresholdValue     = 0\n            Description        = \"Monitors long credentials expiration date for App Registration $($item.DisplayName) $($item.Id)\"\n            ThresholdOperator  = \"GreaterThan\"\n            CustomEmailSubject = \"Your App Regsitration has long credential expiration date set\"\n            Severity           = $alertSeverity\n            ThrottlingInMin    = 1400\n        }\n        SavedSearch = @{ \n            Query = ($longExpirationQuery)\n        }\n        Schedule    = @{\n            Interval = 1440\n            TimeSpan = 1440\n        }\n    }\n\n    $soonExpireAlertName = Get-SoonExpireAlertName -AppRegistrationConfigurationObject $item\n\n    $soonExpirationQuery = @\"\nAppRegistration_CL\n| where  TimeGenerated > startofday(ago(1m))\n| extend KeyAndPasswordSecrets = array_concat(parse_json(PasswordCredentials_s), parse_json(KeyCredentials_s))\n| where array_length( KeyAndPasswordSecrets) > 0 \n| mv-expand Secret = KeyAndPasswordSecrets\n| extend ExpirationDate = make_datetime(Secret.endDateTime)\n| where ExpirationDate > startofday(ago(1m))\n| order by make_datetime(ExpirationDate)\n| summarize arg_min(ExpirationDate, *) by ObjectId_g\n| order by ExpirationDate asc\n| project  ObjectId_g, DisplayName_s, MinExpirationDate = ExpirationDate, OwnersUpns_s\n| where ExpirationDate > now(SHORT_EXPIRATION_DATE_THRESHOLDd)\n| where ObjectId_g == 'REPLACE_OBJECT_ID'\n\"@ -replace 'REPLACE_OBJECT_ID', $item.Id -replace 'SHORT_EXPIRATION_DATE_THRESHOLD', $SoonExpireThresholdInDays\n\n    $soonExpirationAlertObject = @{\n        Alert       = @{\n            Name               = $soonExpireAlertName\n            ThresholdValue     = 0\n            Description        = \"Monitors App Registration $($appRegistration.DisplayName) $($appRegistration.ObjectId) for soon credentials expiration\"\n            ThresholdOperator  = \"GreaterThan\"\n            CustomEmailSubject = \"Your App Regsitration credentials will expire soon\"\n            Severity           = $alertSeverity\n            ThrottlingInMin    = 1400\n        }\n        SavedSearch = @{ \n            Query = ($soonExpirationQuery)\n        }\n        Schedule    = @{\n            Interval = 1440\n            TimeSpan = 1440\n        }\n    }\n\n    $actionGroupName = Get-ActionGroupName -AppRegistrationConfigurationObject $item\n\n    $hasLongExpiringCredentials = $appRegistrationCredentialsLongExpire.Id -contains $item.id\n    if ($hasLongExpiringCredentials) {\n        $alerts += $longExpirationAlertObject \n    }\n\n    $hasSoonExpiringCredentials = $appRegistrationCredentialsSoonExpire.Id -contains $item.id\n\n    if ($hasSoonExpiringCredentials) {\n        $alerts += $soonExpirationAlertObject \n    }\n\n    $logAnalyticsAlertsParametersObject = @{\n        omsWorkspaceName = $LogAnalyticsWorkspaceName\n        actionGroupName  = $actionGroupName\n        alerts           = $alerts\n    }\n\n    # $logAnalyticsAlertstemplateFile = Join-Path -Path $PSScriptRoot -ChildPath 'logAnalyticsAlerts.json'\n    $logAnalyticsAlertstemplateFile = Join-Path -Path . -ChildPath 'logAnalyticsAlerts.json'\n\n    $deploymentParameters = @{\n        Name                    = (\"deployment-$(((Get-Date).ToUniversalTime()).ToString('MMdd-HHmm-ss'))-$( (New-Guid).Guid.Substring(0,3) )\" )\n        ResourceGroupName       = $resourceGroupName\n        TemplateFile            = $logAnalyticsAlertstemplateFile\n        TemplateParameterObject = $logAnalyticsAlertsParametersObject\n        Mode                    = 'Incremental'\n    }\n\n    New-AzResourceGroupDeployment @deploymentParameters #-AsJob\n\n}\n\n\nreturn;\n\nif ($appRegsWithoutOwner.Count -gt 0 ) {\n    return;\n}\n\n#region MISSING OWNER\n\n$resourceNameSuffix = \"noownerspcredentials\"\n\n$actionGroupName = \"ag-$( resourceNameSuffix )\"\n$groupShortName = $actionGroupName.Substring(0, 12)\n\n[array]$emailReceivers = @()\n\nforeach ($objectId in $defaultEmailReciverObjectIds ) { \n    $adUser = Get-AzADUser -ObjectId $objectId\n\n    $emailReceiver = @{\n        name                 = $adUser.DisplayName\n        emailAddress         = $adUser.Mail\n        useCommonAlertSchema = $true\n    }\n\n    $emailReceivers += $emailReceiver\n}\n\n$emailReceivers = @(\n    @{\n        name                 = 'KamilWiecek'\n        emailAddress         = 'kwiec@softserveinc.com'\n        useCommonAlertSchema = $true\n    }\n)\n\n$actionGroupTemplateParameterObject = @{\n    actionGroupName = $actionGroupName\n    groupShortName  = $groupShortName\n    emailReceivers  = $emailReceivers\n    tags            = @{\n        isServicePrincipalMonitoring = '1'\n    }\n}\n\n$resourceGroupName = 'rg-azureadexport'\n$actionGroupTemplateFile = Join-Path -Path $PSScriptRoot -ChildPath 'actionGroup.json'\n\n$longExpirationQuery = @\"\nAppRegistration_CL\n| where TimeGenerated > startofday(ago(1m))\n| extend KeyAndPasswordSecrets = array_concat(parse_json(PasswordCredentials_s), parse_json(KeyCredentials_s))\n| where array_length(KeyAndPasswordSecrets) > 0 \n| mv-expand Secret = KeyAndPasswordSecrets\n| extend ExpirationDate = make_datetime(Secret.endDateTime)\n| order by make_datetime(ExpirationDate)\n| summarize arg_max(ExpirationDate, *) by ObjectId_g\n| where ExpirationDate > now(LONG_EXPIRATION_DATE_THRESHOLDd)\n| project ObjectId_g, DisplayName_s, MaxExpirationDate = ExpirationDate, Secret\n| where ObjectId_g in (REPLACE_OBJECT_IDS)\n\"@ -replace 'LONG_EXPIRATION_DATE_THRESHOLD', $longExpirationDateThreshold \n\n$longExpirationQuery = $longExpirationQuery -replace 'REPLACE_OBJECT_IDS', \"'$( ($appRegsWithoutOwner.ObjectId -join \"','\") )'\"\n\n$shortExpirationQuery = @\"\nAppRegistration_CL\n| where  TimeGenerated > startofday(ago(1m))\n| extend KeyAndPasswordSecrets = array_concat(parse_json(PasswordCredentials_s), parse_json(KeyCredentials_s))\n| where array_length( KeyAndPasswordSecrets) > 0 \n| mv-expand Secret = KeyAndPasswordSecrets\n| extend ExpirationDate = make_datetime(Secret.endDateTime)\n| where ExpirationDate > startofday(ago(1m))\n| order by make_datetime(ExpirationDate)\n| summarize arg_min(ExpirationDate, *) by ObjectId_g\n| order by ExpirationDate asc\n| project  ObjectId_g, DisplayName_s, MinExpirationDate = ExpirationDate, OwnersUpns_s\n| where ExpirationDate > now(SHORT_EXPIRATION_DATE_THRESHOLDd)\n| where ObjectId_g in (REPLACE_OBJECT_IDS)\n\"@ -replace 'SHORT_EXPIRATION_DATE_THRESHOLD', $shortExpirationDateThreshold\n$shortExpirationQuery = $shortExpirationQuery -replace 'REPLACE_OBJECT_IDS', \"'$( ($appRegsWithoutOwner.ObjectId -join \"','\") )'\"\n\n$deploymentParameters = @{\n    Name                    = ('deployment' + '-' + ((Get-Date).ToUniversalTime()).ToString('MMdd-HHmm-ss'))\n    ResourceGroupName       = $resourceGroupName\n    TemplateFile            = $actionGroupTemplateFile\n    TemplateParameterObject = $actionGroupTemplateParameterObject\n    Mode                    = 'Incremental'\n}\n\nNew-AzResourceGroupDeployment @deploymentParameters\n\n$logAnalyticsAlertsParametersObject = @{\n    omsWorkspaceName = 'log-azureadexport'\n    actionGroupName  = $actionGroupName\n    tags             = @{\n        isServicePrincipalMonitoring = '1'\n    }\n    alerts           = @(\n        @{\n            Alert       = @{\n                Name               = \"alert-longexpiration-$( $resourceNameSuffix )\"\n                ThresholdValue     = 0\n                Description        = \"Monitors long credentials expiration date for App Registrations without owner\"\n                ThresholdOperator  = \"GreaterThan\"\n                CustomEmailSubject = \"No owner App Regsitration has long credential expiration date set\"\n                Severity           = $alertSeverity\n                ThrottlingInMin    = 1400\n            }\n            SavedSearch = @{ \n                Query = ($longExpirationQuery)\n            }\n            Schedule    = @{\n                Interval = 1440\n                TimeSpan = 1440\n            }\n        },\n        @{\n            Alert       = @{\n                Name               = \"alert-expirationsoon-$( $resourceNameSuffix )\"\n                ThresholdValue     = 0\n                Description        = \"Monitors App Registration without owner for credentials expiration\"\n                ThresholdOperator  = \"GreaterThan\"\n                CustomEmailSubject = \"No owner App Regsitration credentials will expire soon\"\n                Severity           = $alertSeverity\n                ThrottlingInMin    = 1400\n            }\n            SavedSearch = @{ \n                Query = ($shortExpirationQuery)\n            }\n            Schedule    = @{\n                Interval = 1440\n                TimeSpan = 1440\n            }\n        }\n    )\n}\n\n$logAnalyticsAlertstemplateFile = Join-Path -Path $PSScriptRoot -ChildPath 'logAnalyticsAlerts.json'\n\n$deploymentParameters = @{\n    Name                    = ('deployment' + '-' + ((Get-Date).ToUniversalTime()).ToString('MMdd-HHmm-ss'))\n    ResourceGroupName       = $resourceGroupName\n    TemplateFile            = $logAnalyticsAlertstemplateFile\n    TemplateParameterObject = $logAnalyticsAlertsParametersObject\n    Mode                    = 'Incremental'\n}\n\nNew-AzResourceGroupDeployment @deploymentParameters\n\n#endregion\n\n\n",
                  "logAnalyticsAlerts.json": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"omsWorkspaceName\": {\r\n            \"type\": \"String\"\r\n        },\r\n        \"alerts\": {\r\n            \"defaultValue\": [],\r\n            \"type\": \"Array\"\r\n        },\r\n        \"actionGroupName\": {\r\n            \"type\": \"string\"\r\n        },\r\n        \"tags\": {\r\n            \"type\": \"object\",\r\n            \"defaultValue\": {\r\n            },\r\n            \"metadata\": {\r\n                \"description\": \"Optional. Tags of the resource.\"\r\n            }\r\n        }\r\n    },\r\n    \"variables\": {},\r\n    \"resources\": [\r\n        {\r\n            \"type\": \"microsoft.insights/scheduledqueryrules\",\r\n            \"apiVersion\": \"2018-04-16\",\r\n            \"name\": \"[parameters('alerts')[copyIndex()].Alert.Name]\",\r\n            \"tags\": \"[parameters('tags')]\",\r\n            \"location\": \"[resourceGroup().location]\",\r\n            \"properties\": {\r\n                \"description\": \"[parameters('alerts')[copyIndex()].Alert.Description]\",\r\n                \"displayName\": \"[parameters('alerts')[copyIndex()].Alert.Name]\",\r\n                \"enabled\": \"true\",\r\n                \"autoMitigate\" : false,\r\n                \"source\": {\r\n                    \"query\": \"[parameters('alerts')[copyIndex()].SavedSearch.Query]\",\r\n                    \"authorizedResources\": [],\r\n                    \"dataSourceId\": \"[resourceId('Microsoft.OperationalInsights/workspaces', parameters('omsWorkspaceName'))]\",\r\n                    \"queryType\": \"ResultCount\"\r\n                },\r\n                \"schedule\": {\r\n                    \"frequencyInMinutes\": \"[parameters('alerts')[copyIndex()].Schedule.Interval]\",\r\n                    \"timeWindowInMinutes\": \"[parameters('alerts')[copyIndex()].Schedule.TimeSpan]\"\r\n                },\r\n                \"action\": {\r\n                    \"severity\": \"[parameters('alerts')[copyIndex()].Alert.Severity]\",\r\n                    \"throttlingInMin\": \"[parameters('alerts')[copyIndex()].Alert.ThrottlingInMin]\",\r\n                    \"aznsAction\": {\r\n                        \"actionGroup\": [\r\n                            \"[resourceId('Microsoft.Insights/actiongroups', parameters('actionGroupName'))]\"\r\n                        ],\r\n                        \"emailSubject\": \"[parameters('alerts')[copyIndex()].Alert.CustomEmailSubject]\",\r\n                        \"customWebhookPayload\": \"{}\"\r\n                    },\r\n                    \"trigger\": {\r\n                        \"thresholdOperator\": \"[parameters('alerts')[copyIndex()].Alert.ThresholdOperator]\",\r\n                        \"threshold\": \"[parameters('alerts')[copyIndex()].Alert.ThresholdValue]\"\r\n                    },\r\n                    \"odata.type\": \"Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction\"\r\n                }\r\n            },\r\n            \"copy\": {\r\n                \"name\": \"loop\",\r\n                \"count\": \"[length(parameters('alerts'))]\"\r\n            }\r\n        }\r\n    ]\r\n}",
                  "actionGroup.json": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"actionGroupName\": {\r\n            \"type\": \"string\",\r\n            \"metadata\": {\r\n                \"description\": \"Required. The name of the action group.\"\r\n            }\r\n        },\r\n        \"groupShortName\": {\r\n            \"type\": \"string\",\r\n            \"metadata\": {\r\n                \"description\": \"Required. The short name of the action group.\"\r\n            }\r\n        },\r\n        \"enabled\": {\r\n            \"type\": \"bool\",\r\n            \"defaultValue\": true,\r\n            \"metadata\": {\r\n                \"description\": \"Optional. Indicates whether this action group is enabled. If an action group is not enabled, then none of its receivers will receive communications.\"\r\n            }\r\n        },\r\n        \"roleAssignments\": {\r\n            \"defaultValue\": [\r\n            ],\r\n            \"type\": \"array\",\r\n            \"metadata\": {\r\n                \"description\": \"Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'\"\r\n            }\r\n        },\r\n        \"emailReceivers\": {\r\n            \"type\": \"array\",\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of email receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"smsReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of SMS receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"webhookReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of webhook receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"itsmReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of ITSM receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"azureAppPushReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of AzureAppPush receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"automationRunbookReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of AutomationRunbook receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"voiceReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of voice receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"logicAppReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of logic app receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"azureFunctionReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of function receivers that are part of this action group.\"\r\n            }\r\n        },\r\n        \"armRoleReceivers\": {\r\n            \"type\": \"array\",\r\n            \"defaultValue\": [\r\n            ],\r\n            \"metadata\": {\r\n                \"description\": \"Optional. The list of ARM role receivers that are part of this action group. Roles are Azure RBAC roles and only built-in roles are supported.\"\r\n            }\r\n        },\r\n        \"tags\": {\r\n            \"type\": \"object\",\r\n            \"defaultValue\": {\r\n            },\r\n            \"metadata\": {\r\n                \"description\": \"Optional. Tags of the resource.\"\r\n            }\r\n        },\r\n        \"location\": {\r\n            \"type\": \"string\",\r\n            \"defaultValue\": \"global\",\r\n            \"metadata\": {\r\n                \"description\": \"Optional. Location for all resources.\"\r\n            }\r\n        }\r\n    },\r\n    \"variables\": {\r\n        \"builtInRoleNames\": {\r\n            \"AcrDelete\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]\",\r\n            \"AcrImageSigner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '6cef56e8-d556-48e5-a04f-b8e64114680f')]\",\r\n            \"AcrPull\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]\",\r\n            \"AcrPush\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8311e382-0749-4cb8-b61a-304f252e45ec')]\",\r\n            \"AcrQuarantineReader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]\",\r\n            \"AcrQuarantineWriter\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]\",\r\n            \"API Management Service Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '312a565d-c81f-4fd8-895a-4e21e48d571c')]\",\r\n            \"API Management Service Operator Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e022efe7-f5ba-4159-bbe4-b44f577e9b61')]\",\r\n            \"API Management Service Reader Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '71522526-b88f-4d52-b57f-d31fc3546d0d')]\",\r\n            \"App Configuration Data Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5ae67dd6-50cb-40e7-96ff-dc2bfa4b606b')]\",\r\n            \"App Configuration Data Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '516239f1-63e1-4d78-a4de-a74fb236a071')]\",\r\n            \"Application Insights Component Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ae349356-3a1b-4a5e-921d-050484c6347e')]\",\r\n            \"Application Insights Snapshot Debugger\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]\",\r\n            \"Attestation Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'bbf86eb8-f7b4-4cce-96e4-18cddf81d86e')]\",\r\n            \"Attestation Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fd1bd22b-8476-40bc-a0bc-69b95687b9f3')]\",\r\n            \"Automation Job Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4fe576fe-1146-4730-92eb-48519fa6bf9f')]\",\r\n            \"Automation Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'd3881f73-407a-4167-8283-e981cbba0404')]\",\r\n            \"Automation Runbook Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5fb5aef8-1081-4b8e-bb16-9d5d0385bab5')]\",\r\n            \"Avere Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]\",\r\n            \"Avere Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]\",\r\n            \"Azure Connected Machine Onboarding\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b64e21ea-ac4e-4cdf-9dc9-5b892992bee7')]\",\r\n            \"Azure Connected Machine Resource Administrator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'cd570a14-e51a-42ad-bac8-bafd67325302')]\",\r\n            \"Azure Digital Twins Owner (Preview)\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'bcd981a7-7f74-457b-83e1-cceb9e632ffe')]\",\r\n            \"Azure Digital Twins Reader (Preview)\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'd57506d4-4c8d-48b1-8587-93c323f6a5a3')]\",\r\n            \"Azure Event Hubs Data Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f526a384-b230-433a-b45c-95f59c4a2dec')]\",\r\n            \"Azure Event Hubs Data Receiver\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]\",\r\n            \"Azure Event Hubs Data Sender\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '2b629674-e913-4c01-ae53-ef4638d8f975')]\",\r\n            \"Azure Kubernetes Service Cluster Admin Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '0ab0b1a8-8aac-4efd-b8c2-3ee1fb270be8')]\",\r\n            \"Azure Kubernetes Service Cluster User Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4abbcc35-e782-43d8-92c5-2d3f1bd2253f')]\",\r\n            \"Azure Kubernetes Service Contributor Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ed7f3fbd-7b88-4dd4-9017-9adb7ce333f8')]\",\r\n            \"Azure Maps Data Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8f5e0ce6-4f7b-4dcf-bddf-e6f48634a204')]\",\r\n            \"Azure Maps Data Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '423170ca-a8f6-4b0f-8487-9e4eb8f49bfa')]\",\r\n            \"Azure Sentinel Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ab8e14d6-4a74-4a29-9ba8-549422addade')]\",\r\n            \"Azure Sentinel Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8d289c81-5878-46d4-8554-54e1e3d8b5cb')]\",\r\n            \"Azure Sentinel Responder\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3e150937-b8fe-4cfb-8069-0eaf05ecd056')]\",\r\n            \"Azure Service Bus Data Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '090c5cfd-751d-490a-894a-3ce6f1109419')]\",\r\n            \"Azure Service Bus Data Receiver\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4f6d3b9b-027b-4f4c-9142-0e5a2a2247e0')]\",\r\n            \"Azure Service Bus Data Sender\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '69a216fc-b8fb-44d8-bc22-1f3c2cd27a39')]\",\r\n            \"Azure Stack Registration Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '6f12a6df-dd06-4f3e-bcb1-ce8be600526a')]\",\r\n            \"Backup Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5e467623-bb1f-42f4-a55d-6e525e11384b')]\",\r\n            \"Backup Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '00c29273-979b-4161-815c-10b084fb9324')]\",\r\n            \"Backup Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a795c7a0-d4a2-40c1-ae25-d81f01202912')]\",\r\n            \"Billing Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]\",\r\n            \"BizTalk Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5e3c6656-6cfa-4708-81fe-0de47ac73342')]\",\r\n            \"Blockchain Member Node Access (Preview)\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '31a002a1-acaf-453e-8a5b-297c9ca1ea24')]\",\r\n            \"Blueprint Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '41077137-e803-4205-871c-5a86e6a753b4')]\",\r\n            \"Blueprint Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '437d2ced-4a38-4302-8479-ed2bcb43d090')]\",\r\n            \"CDN Endpoint Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]\",\r\n            \"CDN Endpoint Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]\",\r\n            \"CDN Profile Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]\",\r\n            \"CDN Profile Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8f96442b-4075-438f-813d-ad51ab4019af')]\",\r\n            \"Classic Network Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b34d265f-36f7-4a0d-a4d4-e158ca92e90f')]\",\r\n            \"Classic Storage Account Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '86e8f5dc-a6e9-4c67-9d15-de283e8eac25')]\",\r\n            \"Classic Storage Account Key Operator Service Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '985d6b00-f706-48f5-a6fe-d0ca12fb668d')]\",\r\n            \"Classic Virtual Machine Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'd73bb868-a0df-4d4d-bd69-98a00b01fccb')]\",\r\n            \"ClearDB MySQL DB Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '9106cda0-8a86-4e81-b686-29a22c54effe')]\",\r\n            \"Cognitive Services Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]\",\r\n            \"Cognitive Services Custom Vision Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]\",\r\n            \"Cognitive Services Custom Vision Deployment\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]\",\r\n            \"Cognitive Services Custom Vision Labeler\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '88424f51-ebe7-446f-bc41-7fa16989e96c')]\",\r\n            \"Cognitive Services Custom Vision Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]\",\r\n            \"Cognitive Services Custom Vision Trainer\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]\",\r\n            \"Cognitive Services Data Reader (Preview)\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]\",\r\n            \"Cognitive Services QnA Maker Editor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]\",\r\n            \"Cognitive Services QnA Maker Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '466ccd10-b268-4a11-b098-b4849f024126')]\",\r\n            \"Cognitive Services User\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a97b65f3-24c7-4388-baec-2e87135dc908')]\",\r\n            \"Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]\",\r\n            \"Cosmos DB Account Reader Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]\",\r\n            \"Cosmos DB Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '230815da-be43-4aae-9cb4-875f7bd000aa')]\",\r\n            \"CosmosBackupOperator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]\",\r\n            \"Cost Management Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '434105ed-43f6-45c7-a02f-909b2ba83430')]\",\r\n            \"Cost Management Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '72fafb9e-0641-4937-9268-a91bfd8191a3')]\",\r\n            \"Data Box Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'add466c9-e687-43fc-8d98-dfcf8d720be5')]\",\r\n            \"Data Box Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '028f4ed7-e2a9-465e-a8f4-9c0ffdfdc027')]\",\r\n            \"Data Factory Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '673868aa-7521-48a0-acc6-0f60742d39f5')]\",\r\n            \"Data Lake Analytics Developer\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '47b7735b-770e-4598-a7da-8b91488b4c88')]\",\r\n            \"Data Purger\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '150f5e0c-0603-4f03-8c7f-cf70034c4e90')]\",\r\n            \"Desktop Virtualization User\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '1d18fff3-a72a-46b5-b4a9-0b38a3cd7e63')]\",\r\n            \"DevTest Labs User\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '76283e04-6283-4c54-8f91-bcf1374a3c64')]\",\r\n            \"DNS Zone Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'befefa01-2a29-4197-83a8-272ff33ce314')]\",\r\n            \"DocumentDB Account Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5bd9cd88-fe45-4216-938b-f97437e15450')]\",\r\n            \"EventGrid EventSubscription Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '428e0ff0-5e57-4d9c-a221-2c70d0e0a443')]\",\r\n            \"EventGrid EventSubscription Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '2414bbcf-6497-4faf-8c65-045460748405')]\",\r\n            \"Experimentation Administrator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f646f1b-fa08-80eb-a33b-edd6ce5c915c')]\",\r\n            \"Experimentation Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f646f1b-fa08-80eb-a22b-edd6ce5c915c')]\",\r\n            \"Experimentation Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '49632ef5-d9ac-41f4-b8e7-bbe587fa74a1')]\",\r\n            \"FHIR Data Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5a1fc7df-4bf1-4951-a576-89034ee01acd')]\",\r\n            \"FHIR Data Exporter\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3db33094-8700-4567-8da5-1501d4e7e843')]\",\r\n            \"FHIR Data Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4c8d0bbc-75d3-4935-991f-5f3c56d81508')]\",\r\n            \"FHIR Data Writer\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3f88fce4-5892-4214-ae73-ba5294559913')]\",\r\n            \"Graph Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b60367af-1334-4454-b71e-769d9a4f83d9')]\",\r\n            \"HDInsight Cluster Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '61ed4efc-fab3-44fd-b111-e24485cc132a')]\",\r\n            \"HDInsight Domain Services Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8d8d5a11-05d3-4bda-a417-a08778121c7c')]\",\r\n            \"Hierarchy Settings Administrator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '350f8d15-c687-4448-8ae1-157740a3936d')]\",\r\n            \"Hybrid Server Onboarding\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5d1e5ee4-7c68-4a71-ac8b-0739630a3dfb')]\",\r\n            \"Hybrid Server Resource Administrator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '48b40c6e-82e0-4eb3-90d5-19e40f49b624')]\",\r\n            \"Integration Service Environment Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a41e2c5b-bd99-4a07-88f4-9bf657a760b8')]\",\r\n            \"Integration Service Environment Developer\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c7aa55d3-1abb-444a-a5ca-5e51e485d6ec')]\",\r\n            \"Intelligent Systems Account Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '03a6d094-3444-4b3d-88af-7477090a9e5e')]\",\r\n            \"Key Vault Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]\",\r\n            \"Knowledge Consumer\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ee361c5d-f7b5-4119-b4b6-892157c8f64c')]\",\r\n            \"Kubernetes Cluster - Azure Arc Onboarding\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '34e09817-6cbe-4d01-b1a2-e0eac5743d41')]\",\r\n            \"Lab Creator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b97fb8bc-a8b2-4522-a38b-dd33c7e65ead')]\",\r\n            \"Log Analytics Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]\",\r\n            \"Log Analytics Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '73c42c96-874c-492b-b04d-ab87d138a893')]\",\r\n            \"Logic App Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]\",\r\n            \"Logic App Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '515c2055-d9d4-4321-b1b9-bd0c9a0f79fe')]\",\r\n            \"Managed Application Contributor Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '641177b8-a67a-45b9-a033-47bc880bb21e')]\",\r\n            \"Managed Application Operator Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]\",\r\n            \"Managed Applications Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]\",\r\n            \"Managed Identity Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]\",\r\n            \"Managed Identity Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f1a07417-d97a-45cb-824c-7a7467783830')]\",\r\n            \"Managed Services Registration assignment Delete \": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '91c1777a-f3dc-4fae-b103-61d183457e46')]\",\r\n            \"Management Group Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c')]\",\r\n            \"Management Group Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ac63b705-f282-497d-ac71-919bf39d939d')]\",\r\n            \"Marketplace Admin\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'dd920d6d-f481-47f1-b461-f338c46b2d9f')]\",\r\n            \"Monitoring Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]\",\r\n            \"Monitoring Metrics Publisher\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]\",\r\n            \"Monitoring Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]\",\r\n            \"Network Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4d97b98b-1d4f-4787-a291-c67834d212e7')]\",\r\n            \"New Relic APM Account Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5d28c62d-5b37-4476-8438-e587778df237')]\",\r\n            \"Object Understanding Account Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4dd61c23-6743-42fe-a388-d8bdd41cb745')]\",\r\n            \"Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]\",\r\n            \"Policy Insights Data Writer (Preview)\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '66bb4e9e-b016-4a94-8249-4c0511c2be84')]\",\r\n            \"Private DNS Zone Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]\",\r\n            \"Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]\",\r\n            \"Reader and Data Access\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c12c1c16-33a1-487b-954d-41c89c60f349')]\",\r\n            \"Redis Cache Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e0f68234-74aa-48ed-b826-c38b57376e17')]\",\r\n            \"Remote Rendering Administrator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3df8b902-2a6f-47c7-8cc5-360e9b272a7e')]\",\r\n            \"Remote Rendering Client\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'd39065c4-c120-43c9-ab0a-63eed9795f0a')]\",\r\n            \"Resource Policy Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '36243c78-bf99-498c-9df9-86d9f8d28608')]\",\r\n            \"Scheduler Job Collections Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '188a0f2f-5c9e-469b-ae67-2aa5ce574b94')]\",\r\n            \"Search Service Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]\",\r\n            \"Security Admin\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]\",\r\n            \"Security Assessment Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '612c2aa1-cb24-443b-ac28-3ab7272de6f5')]\",\r\n            \"Security Manager (Legacy)\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e3d13bf0-dd5a-482e-ba6b-9b8433878d10')]\",\r\n            \"Security Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]\",\r\n            \"SignalR AccessKey Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '04165923-9d83-45d5-8227-78b77b0a687e')]\",\r\n            \"SignalR Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8cf5e20a-e4b2-4e9d-b3a1-5ceb692c2761')]\",\r\n            \"Site Recovery Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]\",\r\n            \"Site Recovery Operator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '494ae006-db33-4328-bf46-533a6560a3ca')]\",\r\n            \"Site Recovery Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'dbaa88c4-0c30-4179-9fb3-46319faa6149')]\",\r\n            \"Spatial Anchors Account Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8bbe83f1-e2a6-4df7-8cb4-4e04d4e5c827')]\",\r\n            \"Spatial Anchors Account Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '70bbe301-9835-447d-afdd-19eb3167307c')]\",\r\n            \"Spatial Anchors Account Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '5d51204f-eb77-4b1c-b86a-2ec626c49413')]\",\r\n            \"SQL DB Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]\",\r\n            \"SQL Managed Instance Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]\",\r\n            \"SQL Security Manager\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]\",\r\n            \"SQL Server Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]\",\r\n            \"Storage Account Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]\",\r\n            \"Storage Account Key Operator Service Role\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '81a9662b-bebf-436f-a333-f67b29880f12')]\",\r\n            \"Storage Blob Data Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]\",\r\n            \"Storage Blob Data Owner\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]\",\r\n            \"Storage Blob Data Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]\",\r\n            \"Storage Blob Delegator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]\",\r\n            \"Storage File Data SMB Share Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]\",\r\n            \"Storage File Data SMB Share Elevated Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a7264617-510b-434b-a828-9731dc254ea7')]\",\r\n            \"Storage File Data SMB Share Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]\",\r\n            \"Storage Queue Data Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]\",\r\n            \"Storage Queue Data Message Processor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]\",\r\n            \"Storage Queue Data Message Sender\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]\",\r\n            \"Storage Queue Data Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '19e7f393-937e-4f77-808e-94535e297925')]\",\r\n            \"Support Request Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e')]\",\r\n            \"Tag Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]\",\r\n            \"Traffic Manager Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]\",\r\n            \"User Access Administrator\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]\",\r\n            \"Virtual Machine Administrator Login\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]\",\r\n            \"Virtual Machine Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]\",\r\n            \"Virtual Machine User Login\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]\",\r\n            \"Web Plan Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]\",\r\n            \"Website Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'de139f84-1756-47ae-9be6-808fbbe84772')]\",\r\n            \"Workbook Contributor\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e8ddcd69-c73f-4f9f-9844-4100522f16ad')]\",\r\n            \"Workbook Reader\": \"[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b279062a-9be3-42a0-92ae-8b3cf002ec4d')]\"\r\n        }\r\n    },\r\n    \"resources\": [\r\n        {\r\n            \"name\": \"[parameters('actionGroupName')]\",\r\n            \"type\": \"microsoft.insights/actionGroups\",\r\n            \"apiVersion\": \"2019-06-01\",\r\n            \"location\": \"[parameters('location')]\",\r\n            \"tags\": \"[parameters('tags')]\",\r\n            \"properties\": {\r\n                \"groupShortName\": \"[parameters('groupShortName')]\",\r\n                \"enabled\": \"[parameters('enabled')]\",\r\n                \"emailReceivers\": \"[if(empty(parameters('emailReceivers')), json('null'), parameters('emailReceivers'))]\",\r\n                \"smsReceivers\": \"[if(empty(parameters('smsReceivers')), json('null'), parameters('smsReceivers'))]\",\r\n                \"webhookReceivers\": \"[if(empty(parameters('webhookReceivers')), json('null'), parameters('webhookReceivers'))]\",\r\n                \"itsmReceivers\": \"[if(empty(parameters('itsmReceivers')), json('null'), parameters('itsmReceivers'))]\",\r\n                \"azureAppPushReceivers\": \"[if(empty(parameters('azureAppPushReceivers')), json('null'), parameters('azureAppPushReceivers'))]\",\r\n                \"automationRunbookReceivers\": \"[if(empty(parameters('automationRunbookReceivers')), json('null'), parameters('automationRunbookReceivers'))]\",\r\n                \"voiceReceivers\": \"[if(empty(parameters('voiceReceivers')), json('null'), parameters('voiceReceivers'))]\",\r\n                \"logicAppReceivers\": \"[if(empty(parameters('logicAppReceivers')), json('null'), parameters('logicAppReceivers'))]\",\r\n                \"azureFunctionReceivers\": \"[if(empty(parameters('azureFunctionReceivers')), json('null'), parameters('azureFunctionReceivers'))]\",\r\n                \"armRoleReceivers\": \"[if(empty(parameters('armRoleReceivers')), json('null'), parameters('armRoleReceivers'))]\"\r\n            }\r\n        },\r\n        {\r\n            \"name\": \"[concat('rbac-',deployment().name, copyIndex())]\",\r\n            \"apiVersion\": \"2020-06-01\",\r\n            \"type\": \"Microsoft.Resources/deployments\",\r\n            \"condition\": \"[not(empty(parameters('roleAssignments')))]\",\r\n            \"dependsOn\": [\r\n                \"[parameters('actionGroupName')]\"\r\n            ],\r\n            \"copy\": {\r\n                \"name\": \"rbacDeplCopy\",\r\n                \"count\": \"[length(parameters('roleAssignments'))]\"\r\n            },\r\n            \"properties\": {\r\n                \"mode\": \"Incremental\",\r\n                \"expressionEvaluationOptions\": {\r\n                    \"scope\": \"inner\"\r\n                },\r\n                \"parameters\": {\r\n                    \"roleAssignment\": {\r\n                        \"value\": \"[parameters('roleAssignments')[copyIndex()]]\"\r\n                    },\r\n                    \"builtInRoleNames\": {\r\n                        \"value\": \"[variables('builtInRoleNames')]\"\r\n                    },\r\n                    \"actionGroupName\": {\r\n                        \"value\": \"[parameters('actionGroupName')]\"\r\n                    }\r\n                },\r\n                \"template\": {\r\n                    \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\r\n                    \"contentVersion\": \"1.0.0.0\",\r\n                    \"parameters\": {\r\n                        \"roleAssignment\": {\r\n                            \"type\": \"object\"\r\n                        },\r\n                        \"builtInRoleNames\": {\r\n                            \"type\": \"object\"\r\n                        },\r\n                        \"actionGroupName\": {\r\n                            \"type\": \"string\"\r\n                        }\r\n                    },\r\n                    \"resources\": [\r\n                        {\r\n                            \"type\": \"microsoft.insights/actionGroups/providers/roleAssignments\",\r\n                            \"apiVersion\": \"2018-09-01-preview\",\r\n                            \"name\": \"[concat(parameters('actionGroupName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('actionGroupName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]\",\r\n                            \"dependsOn\": [\r\n                            ],\r\n                            \"copy\": {\r\n                                \"name\": \"innerRbacCopy\",\r\n                                \"count\": \"[length(parameters('roleAssignment').principalIds)]\"\r\n                            },\r\n                            \"properties\": {\r\n                                \"roleDefinitionId\": \"[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]\",\r\n                                \"principalId\": \"[array(parameters('roleAssignment').principalIds)[copyIndex()]]\"\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"functions\": [\r\n    ],\r\n    \"outputs\": {\r\n        \"deploymentResourceGroup\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[resourceGroup().name]\",\r\n            \"metadata\": {\r\n                \"description\": \"The name of the Resource Group the Action Group was created in.\"\r\n            }\r\n        },\r\n        \"actionGroupName\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[parameters('actionGroupName')]\",\r\n            \"metadata\": {\r\n                \"description\": \"The Name of the Azure Action Group.\"\r\n            }\r\n        },\r\n        \"actionGroupResourceId\": {\r\n            \"type\": \"string\",\r\n            \"value\": \"[resourceId('Microsoft.insights/actionGroups',parameters('actionGroupName'))]\",\r\n            \"metadata\": {\r\n                \"description\": \"The Resource Ids of the Action Group deployed.\"\r\n            }\r\n        }\r\n    }\r\n}",
                  "SpMonitoring.psm1": "$Global:DefaultActionGroupName        = 'ag-spmondflt'\n$Global:DefaultMissingOwnersAlertName = 'alert-missingowners'\n$Global:DefaultLongExpireAlertName    = 'alert-longexpire'\n$Global:DefaultSoonExpireAlertName    = 'alert-soonexpire'\n\n$Global:DefaultAlertsNames = $Global:DefaultMissingOwnersAlertName, $Global:DefaultLongExpireAlertName, $Global:DefaultSoonExpireAlertName \n\nfunction Get-AppRegistrationConfigurationRaw {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath\n    )\n\n    $appsPath = Join-Path -Path $AzureAdExportPath -ChildPath Applications\n    $appItems = Get-ChildItem -Path $appsPath\n    $appObjects = @()\n\n    foreach ($appItem in $appItems) {\n        $appJsonPath = Join-Path -Path $appItem.FullName -ChildPath \"$($appItem.Name).json\"\n\n        $appJson = (Get-Content -Path $appJsonPath) -join ''\n        $app = $appJson | ConvertFrom-Json -Depth 100\n\n        $appOwnersPath = Join-Path -Path $appItem.FullName -ChildPath 'Owners'\n        $appHasOwners = Test-Path -Path $appOwnersPath\n\n        if ($appHasOwners) {\n            $ownerItems = Get-ChildItem -Path $appOwnersPath\n\n            $appOwners = @()\n\n            foreach ($ownerItem in $ownerItems) {\n                $ownerJsonPath = Join-Path -Path $ownerItem.FullName -ChildPath \"$($ownerItem.Name).json\"\n                $ownerJson = (Get-Content -Path $ownerJsonPath) -join ''\n                $owner = $ownerJson | ConvertFrom-Json -Depth 100\n                $appOwners += $owner\n            }\n\n            $app | Add-Member -Name Owners -MemberType NoteProperty -Value $appOwners\n        }\n        $appObjects += $app\n    }\n\n    return $appObjects\n}\n\nfunction Convert-AppRegistrationConfigurationFromRaw {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [array]\n        $AppRegistrationConfiguration,\n\n        [Parameter()]\n        [datetime]\n        $ReferenceDateTime = (Get-Date)\n    )\n\n    $appRegistrationConfigurations = $appRegistrationConfigurationsRaw | ForEach-Object -Process {\n        [PSCustomObject]@{\n            DisplayName                     = $_.displayName\n            ObjectId                        = $_.id\n            CreatedDateTime                 = $_.createdDateTime\n            HasOwner                        = $_.owners.Count -ne 0\n            Owners                          = $_.owners\n            OwnersUpns                      = $_.owners.userPrincipalName -join ','\n            KeyCredentials                  = $_.keyCredentials\n            KeyCredentialsCount             = $_.keyCredentials.Count\n            HasExpiredKeyCredentials        = $_.keyCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }\n            ExpiredKeyCredentialsCount      = ($_.keyCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }).Count\n            ValidKeyCredentialsCount        = ($_.keyCredentials | Where-Object -FilterScript { $_.endDateTime -gt $ReferenceDateTime }).Count\n            PasswordCredentials             = $_.passwordCredentials\n            PasswordCredentialsCount        = $_.passwordCredentials.Count\n            HasExpiredPasswordCredentials   = $_.passwordCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }\n            ExpiredPasswordCredentialsCount = ($_.passwordCredentials | Where-Object -FilterScript { $ReferenceDateTime -gt $_.endDateTime }).Count\n            ValidPasswordCredentialsCount   = ($_.passwordCredentials | Where-Object -FilterScript { $_.endDateTime -gt $ReferenceDateTime }).Count\n        }\n    }\n\n    return $appRegistrationConfigurations\n}\n\nfunction Get-SoonestExpiringCredential {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [object]\n        $AppRegistrationConfigurationObject,\n\n        [Parameter()]\n        [datetime]\n        $ReferenceDateTime = (Get-Date)\n    )\n\n    if ($null -eq $AppRegistrationConfigurationObject) {\n        Write-Error <#-Message \"Could not find path: $path\"#> -Exception ([ArgumentNullException]::New()) -ErrorAction Stop\n    }\n\n    [array]$credentials = @()\n    $credentials += $AppRegistrationConfigurationObject.passwordCredentials | Where-Object -Property endDateTime -GT $ReferenceDateTime\n    $credentials += $AppRegistrationConfigurationObject.keyCredentials | Where-Object -Property endDateTime -GT $ReferenceDateTime\n\n    if ($credentials.Count -eq 0) {\n        return $null\n    }\n\n    $result = ($credentials | Sort-Object -Property endDateTime -Descending)[0]\n    return $result\n}\n\nfunction Get-AppRegistrationOwnerMissing {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath\n    )\n\n    $appRegistrationConfigurationsRaw = Get-AppRegistrationConfigurationRaw -AzureAdExportPath $AzureAdExportPath\n    $appRegistrationConfigurations = Convert-AppRegistrationConfigurationFromRaw -AppRegistrationConfiguration $appRegistrationConfigurationsRaw \n    $appRegsitrationsMissingOwner = $appRegistrationConfigurations | Where-Object -Property HasOwner -eq $false \n    \n    return $appRegsitrationsMissingOwner\n}\n\nfunction Get-AppRegistrationPasswordCredentialsConfiguration {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath,\n\n        [Parameter()]\n        [datetime]\n        $ReferenceDateTime = (Get-Date)\n    )\n\n    $appRegistrationConfigurationsRaw = Get-AppRegistrationConfigurationRaw -AzureAdExportPath $AzureAdExportPath\n    $appRegistrationConfigurations = Convert-AppRegistrationConfigurationFromRaw -AppRegistrationConfiguration $appRegistrationConfigurationsRaw \n    \n    [array]$credentials = @()\n\n    $appObjectWithCredentials = $appRegistrationConfigurations | Where-Object -FilterScript {\n        ($_.passwordCredentials.Count -gt 0) \n    }\n    \n    foreach ($appObj in $appObjectWithCredentials) {\n        $appObj.passwordCredentials | ForEach-Object -Process {\n            $credentials += ([PSCustomObject]@{\n                    AppDisplayName          = $appObj.displayName\n                    AppObjectId             = $appObj.id\n                    Description             = $_.displayName\n                    # NoExpirationDate        = $_.endDateTime.Year -eq 2299\n                    Created                 = $_.startDateTime\n                    Expire                  = $_.endDateTime\n                    OwnersUpns              = $appObj.owners.userPrincipalName -join ','\n                    IsExpired               = ($_.endDateTime - $ReferenceDateTime).TotalDays -lt 0\n                    WillExpireDays          = ($_.endDateTime - $ReferenceDateTime).TotalDays \n                    WillExpireInOneWeek     = ($_.endDateTime - $ReferenceDateTime).TotalDays -le 7\n                    WillExpireInOneMonth    = ($_.endDateTime - $ReferenceDateTime).TotalDays -le 30\n                    WillExpireInThreeMonths = ($_.endDateTime - $ReferenceDateTime).TotalDays -le 90\n                })\n        }\n    }\n\n    return $credentials\n}\n\nfunction Get-AppRegistrationKeyCredentialsConfiguration {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [array]\n        $AppRegistrationConfiguration\n    )\n\n    [array]$credentials = @()\n\n    $appObjectWithCredentials = $AppRegistrationConfiguration | Where-Object -FilterScript {\n        ($_.keyCredentials.Count -gt 0) \n    }\n\n    foreach ($appObj in $appObjectWithCredentials) {\n        $appObj.keyCredentials | ForEach-Object -Process {\n            $credentials += ([PSCustomObject]@{\n                    AppDisplayName          = $appObj.displayName\n                    AppObjectId             = $appObj.id\n                    Description             = $_.displayName\n                    Created                 = $_.startDateTime\n                    Expire                  = $_.endDateTime\n                    IsExpired               = ($_.endDateTime - (Get-Date)).TotalDays -lt 0\n                    OwnersUpns              = $appObj.owners.userPrincipalName -join ','\n                    WillExpireDays          = ($_.endDateTime - (Get-Date)).TotalDays \n                    WillExpireInOneWeek     = ($_.endDateTime - (Get-Date)).TotalDays -le 7\n                    WillExpireInOneMonth    = ($_.endDateTime - (Get-Date)).TotalDays -le 30\n                    WillExpireInThreeMonths = ($_.endDateTime - (Get-Date)).TotalDays -le 90\n                    # HasLongExpirationDate   = $_.endDateTime -gt (Get-Date).AddYears(2)\n                })\n        }\n    }\n\n    return $credentials\n}\n\nfunction Get-AppRegistrationCredentialsSoonExpire {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath,\n\n        [Parameter()]\n        [datetime]\n        $ReferenceDateTime = (Get-Date),\n\n        [Parameter()]\n        [int]\n        $ThresholdInDays = 90\n    )\n\n    [array]$result = @()\n\n    $appRegistrationConfigurationsRaw = Get-AppRegistrationConfigurationRaw -AzureAdExportPath $AzureAdExportPath\n\n    foreach ($item in $appRegistrationConfigurationsRaw) {\n        $soonestExpiringCredential = Get-SoonestExpiringCredential -AppRegistrationConfigurationObject $item -ReferenceDateTime $ReferenceDateTime\n        \n        if ($null -eq $soonestExpiringCredential) {\n            Continue\n        }\n\n        $thresholdInMiliseconds = $ThresholdInDays * 24 * 60 * 60 * 1000\n        $milisecondsToExpire = ($soonestExpiringCredential.endDateTime - $ReferenceDateTime).TotalMilliseconds \n\n        $expiresSoon = $thresholdInMiliseconds -gt $milisecondsToExpire\n\n        if ($expiresSoon) {\n            $result += $item\n        }\n    }\n\n    return $result\n}\n\nfunction Get-AppRegistrationCredentialsLongExpire {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath,\n\n        [Parameter()]\n        [datetime]\n        $ReferenceDateTime = (Get-Date),\n\n        [Parameter()]\n        [int]\n        $ThresholdInDays = 365\n    )\n\n    [array]$result = @()\n\n    $appRegistrationConfigurationsRaw = Get-AppRegistrationConfigurationRaw -AzureAdExportPath $AzureAdExportPath\n\n    foreach ($item in $appRegistrationConfigurationsRaw) {\n        \n        [array]$notExpiredCredentials = @()\n        $notExpiredCredentials += $item.passwordCredentials | Where-Object -Property endDateTime -GT $ReferenceDateTime\n        $notExpiredCredentials += $item.keyCredentials | Where-Object -Property endDateTime -GT $ReferenceDateTime\n    \n        if ($notExpiredCredentials.Count -eq 0) {\n            Continue\n        }\n    \n        $latestExpiringCredentials = ($notExpiredCredentials | Sort-Object -Property endDateTime)[0]\n        \n        # Write-Host -Object ($latestExpiringCredentials  | ConvertTo-Json -Compress -Depth 100 )\n\n        $thresholdInMiliseconds = $ThresholdInDays * 24 * 60 * 60 * 1000\n        $milisecondsToExpire = ($latestExpiringCredentials.endDateTime - $ReferenceDateTime).TotalMilliseconds \n\n        $expiresToLate = $milisecondsToExpire -GT $thresholdInMiliseconds\n\n        if ($expiresToLate) {\n            $result += $item\n        }\n    }\n\n    return $result\n}\n\nfunction Get-ActionGroupName {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [object]\n        $AppRegistrationConfigurationObject\n    )\n\n    $md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider\n    $utf8 = New-Object -TypeName System.Text.UTF8Encoding\n    $hash = [System.BitConverter]::ToString($md5.ComputeHash($utf8.GetBytes($AppRegistrationConfigurationObject.Id)))\n\n    $hashSuffix = \"$( $hash.Replace('-','').ToLower() )\"\n\n    $actionGroupName = \"ag-$( $hashSuffix )\".Substring(0, 12)\n\n    return $actionGroupName\n}\n\nfunction Get-LongExpireAlertName {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [object]\n        $AppRegistrationConfigurationObject\n    )\n\n    $md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider\n    $utf8 = New-Object -TypeName System.Text.UTF8Encoding\n    $hash = [System.BitConverter]::ToString($md5.ComputeHash($utf8.GetBytes($AppRegistrationConfigurationObject.Id)))\n\n    $hashSuffix = \"$( $hash.Replace('-','').ToLower() )\"\n\n    $alertName = \"alert-longexpire-$( $hashSuffix )\"\n\n    return $alertName\n}\n\nfunction Get-SoonExpireAlertName {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [object]\n        $AppRegistrationConfigurationObject\n    )\n\n    $md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider\n    $utf8 = New-Object -TypeName System.Text.UTF8Encoding\n    $hash = [System.BitConverter]::ToString($md5.ComputeHash($utf8.GetBytes($AppRegistrationConfigurationObject.Id)))\n\n    $hashSuffix = \"$( $hash.Replace('-','').ToLower() )\"\n\n    $alertName = \"alert-soonexpire-$( $hashSuffix )\"\n\n    return $alertName\n}\n\nfunction Get-ActionGroupsToRemove {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath,\n\n        [Parameter()]\n        [array]\n        $CurrentActionGroupsNames = @()\n    )\n\n    $appRegistrationConfigurationsRaw = Get-AppRegistrationConfigurationRaw -AzureAdExportPath $AzureAdExportPath\n    $requiredActionGroupNames = @( $Global:DefaultActionGroupName )\n\n    foreach ($item in $appRegistrationConfigurationsRaw) {\n        $requiredActionGroupNames += Get-ActionGroupName -AppRegistrationConfigurationObject $item\n    }\n\n    $actionGroupsToRemoveCompareResult = Compare-Object -ReferenceObject $CurrentActionGroupsNames -DifferenceObject $requiredActionGroupNames \n    $actionGroupsToRemove = ($actionGroupsToRemoveCompareResult | Where-Object -Property SideIndicator -EQ '<=').InputObject\n    \n    return $actionGroupsToRemove\n}\n\nfunction Get-AlertsToRemove {\n    [CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]\n        $AzureAdExportPath,\n\n        [Parameter()]\n        [array]\n        $CurrentAlertNames = @(),\n\n        [Parameter()]\n        [datetime]\n        $ReferenceDateTime = (Get-Date),\n\n        [Parameter()]\n        [int]\n        $SoonExpireThresholdInDays = 90,\n\n        [Parameter()]\n        [int]\n        $LongExpireThresholdInDays = 365\n    )\n\n    $requiredAlertNames = $Global:DefaultAlertsNames\n\n    $appRegistrationCredentialsSoonExpire = Get-AppRegistrationCredentialsSoonExpire -AzureAdExportPath $AzureAdExportPath -ReferenceDateTime $ReferenceDateTime -ThresholdInDays $SoonExpireThresholdInDays\n\n    foreach ($item in $appRegistrationCredentialsSoonExpire) {\n        $requiredAlertNames += Get-SoonExpireAlertName -AppRegistrationConfigurationObject $item \n    }\n\n    $appRegistrationCredentialsLongExpire = Get-AppRegistrationCredentialsLongExpire -AzureAdExportPath $AzureAdExportPath -ReferenceDateTime $ReferenceDateTime -ThresholdInDays $LongExpireThresholdInDays\n\n    foreach ($item in $appRegistrationCredentialsLongExpire) {\n        $requiredAlertNames += Get-LongExpireAlertName -AppRegistrationConfigurationObject $item \n    }\n\n    $alertsToRemoveCompareResult = Compare-Object -ReferenceObject $CurrentAlertNames -DifferenceObject $requiredAlertNames \n    $alertsToRemove = ($alertsToRemoveCompareResult | Where-Object -Property SideIndicator -EQ '<=').InputObject\n    \n    return $alertsToRemove\n}\n\n"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionName'))]"
              ]
            }
          ],
          "outputs": {
            "logAnalyticsResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace"
              }
            },
            "logAnalyticsResourceGroup": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The resource group where the log analytics will be deployed"
              }
            },
            "logAnalyticsName": {
              "type": "string",
              "value": "[variables('logAnalyticsWorkspaceName')]",
              "metadata": {
                "description": "The name of the deployed log analytics workspace"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))).customerId]",
              "metadata": {
                "description": "The ID associated with the workspace"
              }
            },
            "functionIdentityObjectId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionName')), '2021-01-15', 'full').identity.principalId]",
              "metadata": {
                "description": "The ID associated with the workspace"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', 'rg-spmonitoring')]"
      ]
    }
  ]
}